<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.ResourceManager.TrafficManager</name>
    </assembly>
    <members>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations">
            <summary>
            Class to overcome issue when the original resource is generated by swagger has "default" suffix in it. E.g.
            "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default"
            which generates HTTP 400 and simply does not work.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of TrafficManagerUserMetricsKeysRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Get the subscription-level key used for Real User Metrics collection. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Get the subscription-level key used for Real User Metrics collection. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations.CreateOrUpdateAsync(System.String,System.Threading.CancellationToken)">
            <summary> Create or update a subscription-level key used for Real User Metrics collection. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations.CreateOrUpdate(System.String,System.Threading.CancellationToken)">
            <summary> Create or update a subscription-level key used for Real User Metrics collection. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> Delete a subscription-level key used for Real User Metrics collection. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsKeysRestOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> Delete a subscription-level key used for Real User Metrics collection. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection">
            <summary>
            The class to overcome issue with the TrafficManagerEndpoint Collection REST API where there is no REST API counterpart that GETs all
            profile data resource. The all profile data resources are retrieved from the collection of endpoints attached to <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData" />.
            </summary>
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" />.
            To get a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection" /> instance call the GetTrafficManagerEndpoints method from an instance of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
            /// <param name="profileData">The parent profile data. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.GetAllAsync">
            <summary>
            Asynchronously lists all Traffic Manager endpoints within a profile.
            </summary>
            <returns> A collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.GetAll">
            <summary>
            Lists all Traffic Manager endpoints within a profile.
            </summary>
            <returns> A collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary>
            Create or update a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_CreateOrUpdate
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be created or updated. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be created or updated. </param>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" />, <paramref name="endpointName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.CreateOrUpdate(Azure.WaitUntil,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary>
            Create or update a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_CreateOrUpdate
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be created or updated. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be created or updated. </param>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" />, <paramref name="endpointName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.ExistsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.Exists(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource">
            <summary>
            Customizes validation of the resource name since default resource name of the TrafficManagerEndpoint has a template parameter baked in.
            </summary>
            <summary>
            A Class representing a TrafficManagerEndpoint along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTrafficManagerEndpointResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> using the GetTrafficManagerEndpoint method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.Get(System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Deletes a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Delete
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Deletes a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Delete
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.UpdateAsync(Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary>
            Update a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Update
            </summary>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.Update(Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary>
            Update a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Update
            </summary>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource">
            <summary>
            Class to overcome issue when the original resource is generated by swagger has "default" suffix in it. E.g.
            "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default"
            which generates HTTP 400 and simply does not work.
            </summary>
            <summary>
            A Class representing a TrafficManagerUserMetrics along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTrafficManagerUserMetricsResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> using the GetTrafficManagerUserMetrics method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.CreateResourceIdentifier(System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Get the subscription-level key used for Real User Metrics collection.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
            Operation Id: TrafficManagerUserMetricsKeys_Get
            </summary>
            <remarks>
            The method is added to overcome problem when the Get API returns resource id with the subscription part which
            actually is an invalid ARM resource id.
            </remarks>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.Get(System.Threading.CancellationToken)">
            <summary>
            Get the subscription-level key used for Real User Metrics collection.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
            Operation Id: TrafficManagerUserMetricsKeys_Get
            </summary>
            <remarks>
            The method is added to overcome problem when the Get API returns resource id with the subscription part which
            actually is an invalid ARM resource id.
            </remarks>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Delete a subscription-level key used for Real User Metrics collection.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
            Operation Id: TrafficManagerUserMetricsKeys_Delete
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Delete a subscription-level key used for Real User Metrics collection.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
            Operation Id: TrafficManagerUserMetricsKeys_Delete
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.CreateOrUpdateAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Create or update a subscription-level key used for Real User Metrics collection.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
            Operation Id: TrafficManagerUserMetricsKeys_CreateOrUpdate
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.CreateOrUpdate(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Create or update a subscription-level key used for Real User Metrics collection.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
            Operation Id: TrafficManagerUserMetricsKeys_CreateOrUpdate
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.ResourceGroupResourceExtensionClient">
            <summary> A class to add extension methods to ResourceGroupResource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ResourceGroupResourceExtensionClient.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.ResourceGroupResourceExtensionClient" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ResourceGroupResourceExtensionClient.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.ResourceGroupResourceExtensionClient" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ResourceGroupResourceExtensionClient.GetTrafficManagerProfiles">
            <summary> Gets a collection of TrafficManagerProfileResources in the ResourceGroupResource. </summary>
            <returns> An object representing collection of TrafficManagerProfileResources and their operations over a TrafficManagerProfileResource. </returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient">
            <summary> A class to add extension methods to SubscriptionResource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient.GetTrafficManagerUserMetrics">
            <summary> Gets an object representing a TrafficManagerUserMetricsResource along with the instance operations that can be performed on it in the SubscriptionResource. </summary>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient.GetTrafficManagerProfilesAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all Traffic Manager profiles within a subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles
            Operation Id: Profiles_ListBySubscription
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.SubscriptionResourceExtensionClient.GetTrafficManagerProfiles(System.Threading.CancellationToken)">
            <summary>
            Lists all Traffic Manager profiles within a subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles
            Operation Id: Profiles_ListBySubscription
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient">
            <summary> A class to add extension methods to TenantResource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient.GetTrafficManagerGeographicHierarchy">
            <summary> Gets an object representing a TrafficManagerGeographicHierarchyResource along with the instance operations that can be performed on it in the TenantResource. </summary>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient.CheckTrafficManagerRelativeDnsNameAvailabilityAsync(Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary>
            Checks the availability of a Traffic Manager Relative DNS name.
            Request Path: /providers/Microsoft.Network/checkTrafficManagerNameAvailability
            Operation Id: Profiles_CheckTrafficManagerRelativeDnsNameAvailability
            </summary>
            <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TenantResourceExtensionClient.CheckTrafficManagerRelativeDnsNameAvailability(Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary>
            Checks the availability of a Traffic Manager Relative DNS name.
            Request Path: /providers/Microsoft.Network/checkTrafficManagerNameAvailability
            Operation Id: Profiles_CheckTrafficManagerRelativeDnsNameAvailability
            </summary>
            <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions">
            <summary> A class to add extension methods to Azure.ResourceManager.TrafficManager. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerGeographicHierarchy(Azure.ResourceManager.Resources.TenantResource)">
            <summary> Gets an object representing a TrafficManagerGeographicHierarchyResource along with the instance operations that can be performed on it in the TenantResource. </summary>
            <param name="tenantResource"> The <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> instance the method will execute against. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.CheckTrafficManagerRelativeDnsNameAvailabilityAsync(Azure.ResourceManager.Resources.TenantResource,Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary>
            Checks the availability of a Traffic Manager Relative DNS name.
            Request Path: /providers/Microsoft.Network/checkTrafficManagerNameAvailability
            Operation Id: Profiles_CheckTrafficManagerRelativeDnsNameAvailability
            </summary>
            <param name="tenantResource"> The <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> instance the method will execute against. </param>
            <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.CheckTrafficManagerRelativeDnsNameAvailability(Azure.ResourceManager.Resources.TenantResource,Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary>
            Checks the availability of a Traffic Manager Relative DNS name.
            Request Path: /providers/Microsoft.Network/checkTrafficManagerNameAvailability
            Operation Id: Profiles_CheckTrafficManagerRelativeDnsNameAvailability
            </summary>
            <param name="tenantResource"> The <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> instance the method will execute against. </param>
            <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerUserMetrics(Azure.ResourceManager.Resources.SubscriptionResource)">
            <summary> Gets an object representing a TrafficManagerUserMetricsResource along with the instance operations that can be performed on it in the SubscriptionResource. </summary>
            <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerProfilesAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)">
            <summary>
            Lists all Traffic Manager profiles within a subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles
            Operation Id: Profiles_ListBySubscription
            </summary>
            <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerProfiles(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)">
            <summary>
            Lists all Traffic Manager profiles within a subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles
            Operation Id: Profiles_ListBySubscription
            </summary>
            <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerProfiles(Azure.ResourceManager.Resources.ResourceGroupResource)">
            <summary> Gets a collection of TrafficManagerProfileResources in the ResourceGroupResource. </summary>
            <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
            <returns> An object representing collection of TrafficManagerProfileResources and their operations over a TrafficManagerProfileResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerProfileAsync(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerProfile(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerEndpointResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerProfileResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerGeographicHierarchyResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.CreateResourceIdentifier" /> to create a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerHeatMapResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.CreateResourceIdentifier(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType)" /> to create a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerExtensions.GetTrafficManagerUserMetricsResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricsResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.#ctor">
            <summary> Initializes a new instance of TrafficManagerArmOperation for mocking. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.#ctor">
            <summary> Initializes a new instance of TrafficManagerArmOperation for mocking. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerArmOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType">
            <summary> The allowed type DNS record types for this profile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.DomainName">
            <summary> DomainName. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.IPv4Address">
            <summary> IPv4Address. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.IPv6Address">
            <summary> IPv6Address. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.Any">
            <summary> Any. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.op_Equality(Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType,Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.op_Inequality(Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType,Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.Equals(Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.ExpectedStatusCodeRangeInfo">
            <summary> Min and max value of a status code range. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.ExpectedStatusCodeRangeInfo.#ctor">
            <summary> Initializes a new instance of ExpectedStatusCodeRangeInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.ExpectedStatusCodeRangeInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary> Initializes a new instance of ExpectedStatusCodeRangeInfo. </summary>
            <param name="min"> Min status code. </param>
            <param name="max"> Max status code. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.ExpectedStatusCodeRangeInfo.Min">
            <summary> Min status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.ExpectedStatusCodeRangeInfo.Max">
            <summary> Max status code. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerDnsConfig">
            <summary> Class containing DNS settings in a Traffic Manager profile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerDnsConfig.#ctor">
            <summary> Initializes a new instance of TrafficManagerDnsConfig. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerDnsConfig.#ctor(System.String,System.String,System.Nullable{System.Int64})">
            <summary> Initializes a new instance of TrafficManagerDnsConfig. </summary>
            <param name="relativeName"> The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile. </param>
            <param name="fqdn"> The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager. </param>
            <param name="ttl"> The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerDnsConfig.RelativeName">
            <summary> The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerDnsConfig.Fqdn">
            <summary> The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerDnsConfig.Ttl">
            <summary> The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointCustomHeaderInfo">
            <summary> Custom header name and value. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointCustomHeaderInfo.#ctor">
            <summary> Initializes a new instance of TrafficManagerEndpointCustomHeaderInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointCustomHeaderInfo.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of TrafficManagerEndpointCustomHeaderInfo. </summary>
            <param name="name"> Header name. </param>
            <param name="value"> Header value. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointCustomHeaderInfo.Name">
            <summary> Header name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointCustomHeaderInfo.Value">
            <summary> Header value. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus">
            <summary> The monitoring status of the endpoint. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.CheckingEndpoint">
            <summary> CheckingEndpoint. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.Online">
            <summary> Online. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.Degraded">
            <summary> Degraded. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.Disabled">
            <summary> Disabled. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.Inactive">
            <summary> Inactive. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.Stopped">
            <summary> Stopped. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus">
            <summary> The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.Enabled">
            <summary> Enabled. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.Disabled">
            <summary> Disabled. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointSubnetInfo">
            <summary> Subnet first address, scope, and/or last address. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointSubnetInfo.#ctor">
            <summary> Initializes a new instance of TrafficManagerEndpointSubnetInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointSubnetInfo.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of TrafficManagerEndpointSubnetInfo. </summary>
            <param name="first"> First address in the subnet. </param>
            <param name="last"> Last address in the subnet. </param>
            <param name="scope"> Block size (number of leading bits in the subnet mask). </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointSubnetInfo.First">
            <summary> First address in the subnet. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointSubnetInfo.Last">
            <summary> Last address in the subnet. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointSubnetInfo.Scope">
            <summary> Block size (number of leading bits in the subnet mask). </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapEndpoint">
            <summary> Class which is a sparse representation of a Traffic Manager endpoint. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapEndpoint.#ctor">
            <summary> Initializes a new instance of TrafficManagerHeatMapEndpoint. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapEndpoint.#ctor(Azure.Core.ResourceIdentifier,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of TrafficManagerHeatMapEndpoint. </summary>
            <param name="resourceId"> The ARM Resource ID of this Traffic Manager endpoint. </param>
            <param name="endpointId"> A number uniquely identifying this endpoint in query experiences. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapEndpoint.ResourceId">
            <summary> The ARM Resource ID of this Traffic Manager endpoint. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapEndpoint.EndpointId">
            <summary> A number uniquely identifying this endpoint in query experiences. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapQueryExperience">
            <summary> Class representing a Traffic Manager HeatMap query experience properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapQueryExperience.#ctor(System.Int32,System.Int32)">
            <summary> Initializes a new instance of TrafficManagerHeatMapQueryExperience. </summary>
            <param name="endpointId"> The id of the endpoint from the 'endpoints' array which these queries were routed to. </param>
            <param name="queryCount"> The number of queries originating from this location. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapQueryExperience.#ctor(System.Int32,System.Int32,System.Nullable{System.Double})">
            <summary> Initializes a new instance of TrafficManagerHeatMapQueryExperience. </summary>
            <param name="endpointId"> The id of the endpoint from the 'endpoints' array which these queries were routed to. </param>
            <param name="queryCount"> The number of queries originating from this location. </param>
            <param name="latency"> The latency experienced by queries originating from this location. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapQueryExperience.EndpointId">
            <summary> The id of the endpoint from the 'endpoints' array which these queries were routed to. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapQueryExperience.QueryCount">
            <summary> The number of queries originating from this location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapQueryExperience.Latency">
            <summary> The latency experienced by queries originating from this location. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow">
            <summary> Class representing a Traffic Manager HeatMap traffic flow properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow.#ctor">
            <summary> Initializes a new instance of TrafficManagerHeatMapTrafficFlow. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow.#ctor(System.Net.IPAddress,System.Nullable{System.Double},System.Nullable{System.Double},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapQueryExperience})">
            <summary> Initializes a new instance of TrafficManagerHeatMapTrafficFlow. </summary>
            <param name="sourceIP"> The IP address that this query experience originated from. </param>
            <param name="latitude"> The approximate latitude that these queries originated from. </param>
            <param name="longitude"> The approximate longitude that these queries originated from. </param>
            <param name="queryExperiences"> The query experiences produced in this HeatMap calculation. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow.SourceIP">
            <summary> The IP address that this query experience originated from. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow.Latitude">
            <summary> The approximate latitude that these queries originated from. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow.Longitude">
            <summary> The approximate longitude that these queries originated from. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow.QueryExperiences">
            <summary> The query experiences produced in this HeatMap calculation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType">
            <summary> The TrafficManagerHeatMapType. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.Default">
            <summary> default. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig">
            <summary> Class containing endpoint monitoring settings in a Traffic Manager profile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.#ctor">
            <summary> Initializes a new instance of TrafficManagerMonitorConfig. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.#ctor(System.Nullable{Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus},System.Nullable{Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfigCustomHeaderInfo},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.ExpectedStatusCodeRangeInfo})">
            <summary> Initializes a new instance of TrafficManagerMonitorConfig. </summary>
            <param name="profileMonitorStatus"> The profile-level monitoring status of the Traffic Manager profile. </param>
            <param name="protocol"> The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health. </param>
            <param name="port"> The TCP port used to probe for endpoint health. </param>
            <param name="path"> The path relative to the endpoint domain name used to probe for endpoint health. </param>
            <param name="intervalInSeconds"> The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile. </param>
            <param name="timeoutInSeconds"> The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check. </param>
            <param name="toleratedNumberOfFailures"> The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check. </param>
            <param name="customHeaders"> List of custom headers. </param>
            <param name="expectedStatusCodeRanges"> List of expected status code ranges. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.ProfileMonitorStatus">
            <summary> The profile-level monitoring status of the Traffic Manager profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.Protocol">
            <summary> The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.Port">
            <summary> The TCP port used to probe for endpoint health. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.Path">
            <summary> The path relative to the endpoint domain name used to probe for endpoint health. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.IntervalInSeconds">
            <summary> The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.TimeoutInSeconds">
            <summary> The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.ToleratedNumberOfFailures">
            <summary> The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.CustomHeaders">
            <summary> List of custom headers. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig.ExpectedStatusCodeRanges">
            <summary> List of expected status code ranges. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfigCustomHeaderInfo">
            <summary> Custom header name and value. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfigCustomHeaderInfo.#ctor">
            <summary> Initializes a new instance of TrafficManagerMonitorConfigCustomHeaderInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfigCustomHeaderInfo.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of TrafficManagerMonitorConfigCustomHeaderInfo. </summary>
            <param name="name"> Header name. </param>
            <param name="value"> Header value. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfigCustomHeaderInfo.Name">
            <summary> Header name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfigCustomHeaderInfo.Value">
            <summary> Header value. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol">
            <summary> The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.Http">
            <summary> HTTP. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.Https">
            <summary> HTTPS. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.Tcp">
            <summary> TCP. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol,Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol,Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorProtocol.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult">
            <summary> Class representing a Traffic Manager Name Availability response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult.#ctor">
            <summary> Initializes a new instance of TrafficManagerNameAvailabilityResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult.#ctor(System.String,System.Nullable{Azure.Core.ResourceType},System.Nullable{System.Boolean},System.String,System.String)">
            <summary> Initializes a new instance of TrafficManagerNameAvailabilityResult. </summary>
            <param name="name"> The relative name. </param>
            <param name="resourceType"> Traffic Manager profile resource type. </param>
            <param name="isNameAvailable"> Describes whether the relative name is available or not. </param>
            <param name="unavailableReason"> The reason why the name is not available, when applicable. </param>
            <param name="message"> Descriptive message that explains why the name is not available, when applicable. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult.Name">
            <summary> The relative name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult.ResourceType">
            <summary> Traffic Manager profile resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult.IsNameAvailable">
            <summary> Describes whether the relative name is available or not. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult.UnavailableReason">
            <summary> The reason why the name is not available, when applicable. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerNameAvailabilityResult.Message">
            <summary> Descriptive message that explains why the name is not available, when applicable. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileListResult">
            <summary> The list Traffic Manager profiles operation response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileListResult.#ctor">
            <summary> Initializes a new instance of TrafficManagerProfileListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.TrafficManager.TrafficManagerProfileData})">
            <summary> Initializes a new instance of TrafficManagerProfileListResult. </summary>
            <param name="value"> Gets the list of Traffic manager profiles. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileListResult.Value">
            <summary> Gets the list of Traffic manager profiles. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus">
            <summary> The profile-level monitoring status of the Traffic Manager profile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.CheckingEndpoints">
            <summary> CheckingEndpoints. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.Online">
            <summary> Online. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.Degraded">
            <summary> Degraded. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.Disabled">
            <summary> Disabled. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.Inactive">
            <summary> Inactive. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileMonitorStatus.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus">
            <summary> The status of the Traffic Manager profile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.Enabled">
            <summary> Enabled. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.Disabled">
            <summary> Disabled. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus,Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProxyResourceData">
            <summary> The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProxyResourceData.#ctor">
            <summary> Initializes a new instance of TrafficManagerProxyResourceData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerProxyResourceData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType})">
            <summary> Initializes a new instance of TrafficManagerProxyResourceData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion">
            <summary> Class representing a region in the Geographic hierarchy used with the Geographic traffic routing method. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion.#ctor">
            <summary> Initializes a new instance of TrafficManagerRegion. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion.#ctor(System.String,System.String,System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion})">
            <summary> Initializes a new instance of TrafficManagerRegion. </summary>
            <param name="code"> The code of the region. </param>
            <param name="name"> The name of the region. </param>
            <param name="regions"> The list of Regions grouped under this Region in the Geographic Hierarchy. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion.Code">
            <summary> The code of the region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion.Name">
            <summary> The name of the region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion.Regions">
            <summary> The list of Regions grouped under this Region in the Geographic Hierarchy. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent">
            <summary> Parameters supplied to check Traffic Manager name operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent.#ctor">
            <summary> Initializes a new instance of TrafficManagerRelativeDnsNameAvailabilityContent. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent.Name">
            <summary> The name of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent.ResourceType">
            <summary> The type of the resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerResourceData">
            <summary> The core properties of ARM resources. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerResourceData.#ctor">
            <summary> Initializes a new instance of TrafficManagerResourceData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerResourceData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType})">
            <summary> Initializes a new instance of TrafficManagerResourceData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerResourceData.Id">
            <summary> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerResourceData.Name">
            <summary> The name of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerResourceData.ResourceType">
            <summary> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficManagerTrackedResourceData">
            <summary> The resource model definition for a ARM tracked top level resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerTrackedResourceData.#ctor">
            <summary> Initializes a new instance of TrafficManagerTrackedResourceData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficManagerTrackedResourceData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Core.AzureLocation})">
            <summary> Initializes a new instance of TrafficManagerTrackedResourceData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
            <param name="tags"> Resource tags. </param>
            <param name="location"> The Azure Region where the resource lives. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerTrackedResourceData.Tags">
            <summary> Resource tags. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficManagerTrackedResourceData.Location">
            <summary> The Azure Region where the resource lives. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod">
            <summary> The traffic routing method of the Traffic Manager profile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.Performance">
            <summary> Performance. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.Priority">
            <summary> Priority. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.Weighted">
            <summary> Weighted. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.Geographic">
            <summary> Geographic. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.MultiValue">
            <summary> MultiValue. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.Subnet">
            <summary> Subnet. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod,Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod,Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus">
            <summary> Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.Enabled">
            <summary> Enabled. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.Disabled">
            <summary> Disabled. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.op_Equality(Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus,Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.op_Inequality(Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus,Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.op_Implicit(System.String)~Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.Equals(Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData">
            <summary> A class representing the TrafficManagerEndpoint data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.#ctor">
            <summary> Initializes a new instance of TrafficManagerEndpointData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointStatus},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointMonitorStatus},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointSubnetInfo},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.TrafficManagerEndpointCustomHeaderInfo})">
            <summary> Initializes a new instance of TrafficManagerEndpointData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
            <param name="targetResourceId"> The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'. </param>
            <param name="target"> The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint. </param>
            <param name="endpointStatus"> The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method. </param>
            <param name="weight"> The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000. </param>
            <param name="priority"> The priority of this endpoint when using the 'Priority' traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value. </param>
            <param name="endpointLocation"> Specifies the location of the external or nested endpoints when using the 'Performance' traffic routing method. </param>
            <param name="endpointMonitorStatus"> The monitoring status of the endpoint. </param>
            <param name="minChildEndpoints"> The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. </param>
            <param name="minChildEndpointsIPv4"> The minimum number of IPv4 (DNS record type A) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. </param>
            <param name="minChildEndpointsIPv6"> The minimum number of IPv6 (DNS record type AAAA) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. </param>
            <param name="geoMapping"> The list of countries/regions mapped to this endpoint when using the 'Geographic' traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values. </param>
            <param name="subnets"> The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the 'Subnet' traffic routing method. An empty list will match all ranges not covered by other endpoints. </param>
            <param name="customHeaders"> List of custom headers. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.TargetResourceId">
            <summary> The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.Target">
            <summary> The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.EndpointStatus">
            <summary> The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.Weight">
            <summary> The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.Priority">
            <summary> The priority of this endpoint when using the 'Priority' traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.EndpointLocation">
            <summary> Specifies the location of the external or nested endpoints when using the 'Performance' traffic routing method. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.EndpointMonitorStatus">
            <summary> The monitoring status of the endpoint. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.MinChildEndpoints">
            <summary> The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.MinChildEndpointsIPv4">
            <summary> The minimum number of IPv4 (DNS record type A) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.MinChildEndpointsIPv6">
            <summary> The minimum number of IPv6 (DNS record type AAAA) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.GeoMapping">
            <summary> The list of countries/regions mapped to this endpoint when using the 'Geographic' traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.Subnets">
            <summary> The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the 'Subnet' traffic routing method. An empty list will match all ranges not covered by other endpoints. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData.CustomHeaders">
            <summary> List of custom headers. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyData">
            <summary> A class representing the TrafficManagerGeographicHierarchy data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyData.#ctor">
            <summary> Initializes a new instance of TrafficManagerGeographicHierarchyData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},Azure.ResourceManager.TrafficManager.Models.TrafficManagerRegion)">
            <summary> Initializes a new instance of TrafficManagerGeographicHierarchyData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
            <param name="geographicHierarchy"> The region at the root of the hierarchy from all the regions in the hierarchy can be retrieved. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyData.GeographicHierarchy">
            <summary> The region at the root of the hierarchy from all the regions in the hierarchy can be retrieved. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData">
            <summary> A class representing the TrafficManagerHeatMap data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData.#ctor">
            <summary> Initializes a new instance of TrafficManagerHeatMapData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapEndpoint},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapTrafficFlow})">
            <summary> Initializes a new instance of TrafficManagerHeatMapData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
            <param name="startOn"> The beginning of the time window for this HeatMap, inclusive. </param>
            <param name="endOn"> The ending of the time window for this HeatMap, exclusive. </param>
            <param name="endpoints"> The endpoints used in this HeatMap calculation. </param>
            <param name="trafficFlows"> The traffic flows produced in this HeatMap calculation. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData.StartOn">
            <summary> The beginning of the time window for this HeatMap, inclusive. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData.EndOn">
            <summary> The ending of the time window for this HeatMap, exclusive. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData.Endpoints">
            <summary> The endpoints used in this HeatMap calculation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData.TrafficFlows">
            <summary> The traffic flows produced in this HeatMap calculation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData">
            <summary> A class representing the TrafficManagerProfile data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.#ctor">
            <summary> Initializes a new instance of TrafficManagerProfileData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Core.AzureLocation},System.Nullable{Azure.ResourceManager.TrafficManager.Models.TrafficManagerProfileStatus},System.Nullable{Azure.ResourceManager.TrafficManager.Models.TrafficRoutingMethod},Azure.ResourceManager.TrafficManager.Models.TrafficManagerDnsConfig,Azure.ResourceManager.TrafficManager.Models.TrafficManagerMonitorConfig,System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData},System.Nullable{Azure.ResourceManager.TrafficManager.Models.TrafficViewEnrollmentStatus},System.Collections.Generic.IList{Azure.ResourceManager.TrafficManager.Models.AllowedEndpointRecordType},System.Nullable{System.Int64})">
            <summary> Initializes a new instance of TrafficManagerProfileData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
            <param name="tags"> Resource tags. </param>
            <param name="location"> The Azure Region where the resource lives. </param>
            <param name="profileStatus"> The status of the Traffic Manager profile. </param>
            <param name="trafficRoutingMethod"> The traffic routing method of the Traffic Manager profile. </param>
            <param name="dnsConfig"> The DNS settings of the Traffic Manager profile. </param>
            <param name="monitorConfig"> The endpoint monitoring settings of the Traffic Manager profile. </param>
            <param name="endpoints"> The list of endpoints in the Traffic Manager profile. </param>
            <param name="trafficViewEnrollmentStatus"> Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile. </param>
            <param name="allowedEndpointRecordTypes"> The list of allowed endpoint record types. </param>
            <param name="maxReturn"> Maximum number of endpoints to be returned for MultiValue routing type. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.ProfileStatus">
            <summary> The status of the Traffic Manager profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.TrafficRoutingMethod">
            <summary> The traffic routing method of the Traffic Manager profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.DnsConfig">
            <summary> The DNS settings of the Traffic Manager profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.MonitorConfig">
            <summary> The endpoint monitoring settings of the Traffic Manager profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.Endpoints">
            <summary> The list of endpoints in the Traffic Manager profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.TrafficViewEnrollmentStatus">
            <summary> Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.AllowedEndpointRecordTypes">
            <summary> The list of allowed endpoint record types. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileData.MaxReturn">
            <summary> Maximum number of endpoints to be returned for MultiValue routing type. </summary>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricData">
            <summary> A class representing the TrafficManagerUserMetric data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricData.#ctor">
            <summary> Initializes a new instance of TrafficManagerUserMetricData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},System.String)">
            <summary> Initializes a new instance of TrafficManagerUserMetricData. </summary>
            <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. </param>
            <param name="key"> The key returned by the User Metrics operation. </param>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerUserMetricData.Key">
            <summary> The key returned by the User Metrics operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of EndpointsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.UpdateAsync(System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary> Update a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint to be updated. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be updated. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be updated. </param>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" />, <paramref name="endpointName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.Update(System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary> Update a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint to be updated. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be updated. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be updated. </param>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" />, <paramref name="endpointName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.GetAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.Get(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.CreateOrUpdateAsync(System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary> Create or update a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint to be created or updated. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be created or updated. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be created or updated. </param>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" />, <paramref name="endpointName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.CreateOrUpdate(System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerEndpointData,System.Threading.CancellationToken)">
            <summary> Create or update a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint to be created or updated. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be created or updated. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be created or updated. </param>
            <param name="data"> The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" />, <paramref name="endpointName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.DeleteAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint to be deleted. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be deleted. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be deleted. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.EndpointsRestOperations.Delete(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a Traffic Manager endpoint. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint to be deleted. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="endpointType"> The type of the Traffic Manager endpoint to be deleted. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint to be deleted. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" />, <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.GeographicHierarchiesRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of GeographicHierarchiesRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.GeographicHierarchiesRestOperations.GetDefaultAsync(System.Threading.CancellationToken)">
            <summary> Gets the default Geographic Hierarchy used by the Geographic traffic routing method. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.GeographicHierarchiesRestOperations.GetDefault(System.Threading.CancellationToken)">
            <summary> Gets the default Geographic Hierarchy used by the Geographic traffic routing method. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.HeatMapRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of HeatMapRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.HeatMapRestOperations.GetAsync(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary> Gets latest heatmap for Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.HeatMapRestOperations.Get(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary> Gets latest heatmap for Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager endpoint. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of ProfilesRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.CheckTrafficManagerRelativeDnsNameAvailabilityAsync(Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary> Checks the availability of a Traffic Manager Relative DNS name. </summary>
            <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.CheckTrafficManagerRelativeDnsNameAvailability(Azure.ResourceManager.TrafficManager.Models.TrafficManagerRelativeDnsNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary> Checks the availability of a Traffic Manager Relative DNS name. </summary>
            <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.ListByResourceGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Lists all Traffic Manager profiles within a resource group. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profiles to be listed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.ListByResourceGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Lists all Traffic Manager profiles within a resource group. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profiles to be listed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.ListBySubscriptionAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists all Traffic Manager profiles within a subscription. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.ListBySubscription(System.String,System.Threading.CancellationToken)">
            <summary> Lists all Traffic Manager profiles within a subscription. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.Get(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.CreateOrUpdateAsync(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary> Create or update a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="data"> The Traffic Manager profile parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.CreateOrUpdate(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary> Create or update a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="data"> The Traffic Manager profile parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.DeleteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile to be deleted. </param>
            <param name="profileName"> The name of the Traffic Manager profile to be deleted. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.Delete(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile to be deleted. </param>
            <param name="profileName"> The name of the Traffic Manager profile to be deleted. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.UpdateAsync(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary> Update a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="data"> The Traffic Manager profile parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.ProfilesRestOperations.Update(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary> Update a Traffic Manager profile. </summary>
            <param name="subscriptionId"> Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
            <param name="resourceGroupName"> The name of the resource group containing the Traffic Manager profile. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="data"> The Traffic Manager profile parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="profileName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource">
            <summary>
            A Class representing a TrafficManagerGeographicHierarchy along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTrafficManagerGeographicHierarchyResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> using the GetTrafficManagerGeographicHierarchy method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.CreateResourceIdentifier">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the default Geographic Hierarchy used by the Geographic traffic routing method.
            Request Path: /providers/Microsoft.Network/trafficManagerGeographicHierarchies/default
            Operation Id: GeographicHierarchies_GetDefault
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerGeographicHierarchyResource.Get(System.Threading.CancellationToken)">
            <summary>
            Gets the default Geographic Hierarchy used by the Geographic traffic routing method.
            Request Path: /providers/Microsoft.Network/trafficManagerGeographicHierarchies/default
            Operation Id: GeographicHierarchies_GetDefault
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" />.
            To get a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection" /> instance call the GetTrafficManagerHeatMaps method from an instance of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.GetAsync(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.Get(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.ExistsAsync(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.Exists(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource">
            <summary>
            A Class representing a TrafficManagerHeatMap along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTrafficManagerHeatMapResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> using the GetTrafficManagerHeatMap method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.CreateResourceIdentifier(System.String,System.String,System.String,Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.GetAsync(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource.Get(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" />.
            To get a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection" /> instance call the GetTrafficManagerProfiles method from an instance of <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary>
            Create or update a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_CreateOrUpdate
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="data"> The Traffic Manager profile parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary>
            Create or update a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_CreateOrUpdate
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="data"> The Traffic Manager profile parameters supplied to the CreateOrUpdate operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all Traffic Manager profiles within a resource group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles
            Operation Id: Profiles_ListByResourceGroup
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.GetAll(System.Threading.CancellationToken)">
            <summary>
            Lists all Traffic Manager profiles within a resource group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles
            Operation Id: Profiles_ListByResourceGroup
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="profileName"> The name of the Traffic Manager profile. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="profileName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="profileName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource">
            <summary>
            A Class representing a TrafficManagerProfile along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTrafficManagerProfileResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> using the GetTrafficManagerProfile method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.CreateResourceIdentifier(System.String,System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.TrafficManager.TrafficManagerProfileData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.GetTrafficManagerEndpoints">
            <summary> Gets a collection of TrafficManagerEndpointResources in the TrafficManagerProfile. </summary>
            <returns> An object representing collection of TrafficManagerEndpointResources and their operations over a TrafficManagerEndpointResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.GetTrafficManagerEndpointAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.GetTrafficManagerEndpoint(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager endpoint.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
            Operation Id: Endpoints_Get
            </summary>
            <param name="endpointType"> The type of the Traffic Manager endpoint. </param>
            <param name="endpointName"> The name of the Traffic Manager endpoint. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpointType" /> or <paramref name="endpointName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.GetTrafficManagerHeatMaps">
            <summary> Gets a collection of TrafficManagerHeatMapResources in the TrafficManagerProfile. </summary>
            <returns> An object representing collection of TrafficManagerHeatMapResources and their operations over a TrafficManagerHeatMapResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.GetTrafficManagerHeatMapAsync(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.GetTrafficManagerHeatMap(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
            <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
            <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.Get(System.Threading.CancellationToken)">
            <summary>
            Gets a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Deletes a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Delete
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Deletes a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Delete
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.UpdateAsync(Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary>
            Update a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Update
            </summary>
            <param name="data"> The Traffic Manager profile parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.Update(Azure.ResourceManager.TrafficManager.TrafficManagerProfileData,System.Threading.CancellationToken)">
            <summary>
            Update a Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Update
            </summary>
            <param name="data"> The Traffic Manager profile parameters supplied to the Update operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="value"> The value for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> or <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.AddTag(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="value"> The value for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> or <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="tags"> The set of tags to use as replacement. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="tags"> The set of tags to use as replacement. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource.RemoveTag(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
            Operation Id: Profiles_Get
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Models.ManagedServiceIdentityTypeV3Converter">
            <summary> JsonConverter for managed service identity type v3. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityTypeV3Converter.Write(System.Text.Json.Utf8JsonWriter,Azure.ResourceManager.Models.ManagedServiceIdentityType,System.Text.Json.JsonSerializerOptions)">
            <summary> Serialize managed service identity type to v3 format. </summary>
            <param name="writer"> The writer. </param>
            <param name="model"> The ManagedServiceIdentityType model which is v4. </param>
            <param name="options"> The options for JsonSerializer. </param>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityTypeV3Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary> Deserialize managed service identity type from v3 format. </summary>
            <param name="reader"> The reader. </param>
            <param name="typeToConvert"> The type to convert </param>
            <param name="options"> The options for JsonSerializer. </param>
        </member>
        <member name="T:Azure.ResourceManager.SharedExtensions">
            <summary>
            helper class
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.SharedExtensions.SubstringAfterProviderNamespace(Azure.Core.ResourceIdentifier)">
            <summary>
            Collects the segments in a resource identifier into a string
            </summary>
            <param name="resourceId">the resource identifier</param>
            <returns></returns>
        </member>
        <member name="M:Azure.ResourceManager.SharedExtensions.ReplaceWith(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            An extension method for supporting replacing one dictionary content with another one.
            This is used to support resource tags.
            </summary>
            <param name="dest"> The destination dictionary in which the content will be replaced. </param>
            <param name="src"> The source dictionary from which the content is copied from. </param>
            <returns> The destination dictionary that has been altered. </returns>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="M:Azure.Core.LowLevelPageableHelpers.BuildPageForResponse(Azure.Response,System.String,System.String)">
            <summary>
            Returns a <see cref="T:Azure.Page`1" /> for a given response.
            </summary>
            <param name="response"></param>
            <param name="itemPropertyName"></param>
            <param name="nextLinkPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation{`0},Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then use as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the property <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />
            property and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.DelayStrategy">
            <summary>
            Strategy to control delay behavior.
            </summary>
        </member>
        <member name="M:Azure.Core.DelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the interval of next delay iteration.
            </summary>
            <remarks> Note that the value could change per call. </remarks>
            <param name="response"> Server response. </param>
            <param name="suggestedInterval"> Suggested pollingInterval. It is up to strategy
            implementation to decide how to deal with this parameter. </param>
            <returns> Delay interval of next iteration. </returns>
        </member>
        <member name="T:Azure.Core.ConstantDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> with constant polling interval.
            </summary>
            <remarks>Polling interval is always equal to the given polling interval.</remarks>
        </member>
        <member name="M:Azure.Core.ConstantDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.ExponentialDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" />. Polling interval changes according to
            the sequence {1, 1, 1, 2, 4, ...32}.
            </summary>
            <remarks>Polling interval always follows the given sequence.</remarks>
        </member>
        <member name="M:Azure.Core.ExponentialDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from {1, 1, 1, 2, 4, ...32}.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
        </member>
        <member name="T:Azure.Core.RetryAfterDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> of which the interval is from
            retry-after header of service response.
            </summary>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.#ctor(Azure.Core.DelayStrategy)">
            <summary>
            Create a <see cref="T:Azure.Core.RetryAfterDelayStrategy" /> with a default retry-after value which normally
            comes from the initial response of an LRO operation.
            </summary>
            <param name="fallbackStrategy"> Fallback strategy if retry after is not present. </param>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of retry-after header of given service response and <paramref name="suggestedInterval" />.
            If retry-after header is not found, adopt the value of last retry-after header.
            </summary>
            <param name="response">Service response which might carry retry-after header.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of retry-after header and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.AssertEnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not defined for <paramref name="enumType" />.
            </summary>
            <param name="enumType">The type to validate against.</param>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not defined for <paramref name="enumType" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="T:Azure.Core.ForwardsClientCallsAttribute">
            <summary>
            Marks methods that call methods on other client and don't need their diagnostics verified.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
            <param name="skipChecks"> Sets whether or not diagnostic scope validation should happen. </param>
        </member>
        <member name="P:Azure.Core.ForwardsClientCallsAttribute.SkipChecks">
            <summary>
            Gets whether or not we should validate DiagnosticScope for this API.
            In the case where there is an internal API that makes the Azure API call and a public API that uses it we need ForwardsClientCalls.
            If the public API will cache the results then the diagnostic scope will not always be created because an Azure API is not always called.
            In this case we need to turn off this validation for this API only.
            </summary>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#TrafficManager#TrafficManagerEndpointData}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerEndpointCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#TrafficManager#TrafficManagerEndpointData}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#TrafficManager#TrafficManagerProfileResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.TrafficManager.TrafficManagerProfileCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#TrafficManager#TrafficManagerProfileResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
